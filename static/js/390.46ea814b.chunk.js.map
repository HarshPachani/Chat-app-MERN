{"version":3,"file":"static/js/390.46ea814b.chunk.js","mappings":"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","sources":["shared/ChatItem.jsx","components/OptionChip.jsx","components/ChatList.jsx","dialogs/DeleteChatMenu.jsx","components/AppLayout.jsx","components/IconButton.jsx","components/SideBar.jsx","constants/events.js","dialogs/MenuAnchor.jsx","hooks/Hook.jsx","shared/AvatarCard.jsx","shared/Title.jsx"],"sourcesContent":["import React, { memo } from 'react'\r\nimport { Link } from '../styles/StyledComponents'\r\nimport AvatarCard from './AvatarCard'\r\nimport { Box, Stack, Typography } from '@mui/material';\r\nimport { gray, white } from '../constants/color';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst ChatItem = ({\r\n    avatar=[],\r\n    name,\r\n    _id,\r\n    groupChat=false,\r\n    sameSender,\r\n    isOnline,\r\n    index = 0,\r\n    newMessageAlert,\r\n}) => {\r\n  const { theme } = useSelector(store => store.chat);\r\n  \r\n  return (\r\n    <Link\r\n      sx = {{\r\n          padding: '0',\r\n          borderRadius: '10px 10px 10px 0px'\r\n      }}\r\n      to={`/Chat-app-MERN/chat/${_id}`}\r\n    >\r\n        <div\r\n          style={{\r\n             display: \"flex\",\r\n             gap: \"1rem\",\r\n             alignItems: \"center\",\r\n             backgroundColor: sameSender ? gray : \"unset\",\r\n             color: sameSender ? \"black\" : \"unset\",\r\n             position: \"relative\",\r\n             padding: \"1rem\",\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              position: 'relative',\r\n            }}\r\n          >\r\n            <AvatarCard avatar={avatar}/>\r\n            {(isOnline && !groupChat) && (\r\n              <Box\r\n                sx={{\r\n                  width: '10px',\r\n                  height: '10px',\r\n                  borderRadius: '50%',\r\n                  backgroundColor: 'green',\r\n                  border: '0.5px solid white',\r\n                  margin: '2px',\r\n                  marginBottom: 0,\r\n                  position: 'absolute',\r\n                  bottom: 0,\r\n                  right: { xs: '1.7rem', sm: '1rem' },\r\n                  transform: 'translateY(-50%)',\r\n                }}\r\n              />\r\n            )}\r\n          </div>\r\n            <Stack>\r\n                <Typography variant='h6'>{name}</Typography>\r\n            </Stack>\r\n              <Typography \r\n                sx={{\r\n                  fontSize: '0.75rem',\r\n                  padding: '0px 7px',\r\n                  margin: '3px',\r\n                  bgcolor: theme,\r\n                  color: white,\r\n                  borderRadius: '50%',\r\n                  position: 'absolute',\r\n                  right: 0,\r\n              }}>{newMessageAlert?.count}</Typography>\r\n        </div>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default memo(ChatItem)","import { Box, Chip } from '@mui/material'\r\nimport React, { memo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst OptionChip = ({ optionType, setOptionType }) => {\r\n    const { theme } = useSelector(store => store.chat);\r\n  return (\r\n    <Box display={'flex'} alignItems={'center'} gap={1} margin={'0.5rem'} marginTop={0} padding={'0.5rem'} borderRadius={'1rem'}>\r\n        <Chip\r\n          label=\"All\" \r\n          variant={optionType==='all' ? 'filled' : 'outlined'}\r\n          clickable\r\n          onClick={() => setOptionType('all')}\r\n          sx={{\r\n            bgcolor: optionType === 'all' ? theme : 'transparent',\r\n            color: optionType === 'all' ? '#ffffff' : theme,\r\n            borderColor: optionType !== 'all' && theme,\r\n          }}\r\n          />\r\n        <Chip\r\n          label=\"Unread\"\r\n          variant={optionType==='unread' ? 'filled' : 'outlined'}\r\n          clickable\r\n          onClick={() => setOptionType('unread')}\r\n          sx={{\r\n            bgcolor: optionType === 'unread' ? theme : 'transparent',\r\n            color: optionType === 'unread' ? '#ffffff' : theme,\r\n            borderColor: optionType !== 'unread' && theme,\r\n          }}\r\n          />\r\n        <Chip\r\n          label=\"Groups\"\r\n          variant={optionType==='groups' ? 'filled' : 'outlined'}\r\n          clickable\r\n          onClick={() => setOptionType('groups')}\r\n          sx={{\r\n            bgcolor: optionType === 'groups' ? theme : 'transparent',\r\n            color: optionType === 'groups' ? '#ffffff' : theme,\r\n            borderColor: optionType !== 'groups' && theme,\r\n          }}\r\n        />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default memo(OptionChip)","import React, { Suspense, lazy, memo, useEffect, useRef, useState } from 'react'\r\nimport { Backdrop, CircularProgress, Stack } from '@mui/material'\r\nimport ChatItem from '../shared/ChatItem'\r\nimport { white } from '../constants/color'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Box, Typography } from '@mui/material';\r\nimport { InputBox } from '../styles/StyledComponents'\r\nimport IconBtn from './IconButton'\r\nimport { AccountCircle as ProfileIcon } from '@mui/icons-material'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setIsProfile } from '../redux/reducers/misc'\r\nimport MenuAnchor from '../dialogs/MenuAnchor.jsx'\r\nimport OptionChip from './OptionChip.jsx'\r\n\r\nconst ProfileDialog = lazy(() => import('../dialogs/ProfileDialog.jsx'));\r\n\r\nconst ChatList = ({\r\n    chats = [],\r\n    newMessagesAlert = [\r\n        {\r\n          chatId: \"\",\r\n          count: 0,\r\n        },\r\n    ],\r\n    user,\r\n    onlineUsers = [],\r\n    isLoading,\r\n}) => {\r\n    const dispatch = useDispatch();\r\n    const params = useParams();\r\n    const chatId = params?.id;\r\n\r\n    const profileAnchor = useRef(null);\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [userChats, setUserChats] = useState(chats);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [optionType, setOptionType] = useState('all');\r\n\r\n    const { isProfile } = useSelector(store => store.misc);\r\n    const { theme } = useSelector(store => store.chat);\r\n\r\n    const filterOptions = () => {\r\n        switch (optionType) {\r\n            case 'unread':\r\n                const unreadChats = chats?.filter(chat => newMessagesAlert.some(unreadChat => unreadChat.chatId === chat._id));\r\n                return unreadChats;\r\n                break;\r\n            case 'groups':\r\n                const groupChats = chats?.filter(chat => chat?.groupChat === true);\r\n                return groupChats;\r\n                break;\r\n            default:\r\n                return chats;\r\n                break;\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setUserChats(chats);\r\n    }, [chats]);\r\n\r\n    useEffect(() => {\r\n        if(search.trim() === '') {\r\n            setUserChats(filterOptions());\r\n        } else {\r\n            const filteredChats  = filterOptions().filter(chat => chat.name.toLowerCase().includes(search.toLowerCase().trim()));\r\n            setUserChats(filteredChats);\r\n        }\r\n    }, [search]);\r\n    \r\n    useEffect(() => {\r\n        setUserChats(filterOptions());\r\n    }, [optionType]);\r\n\r\n    const handleSearchChange = (e) => {\r\n        setSearch(e.target.value);\r\n    }\r\n    \r\n    const openProfile = () => {\r\n        setIsOpen(false);\r\n        dispatch(setIsProfile(true));\r\n    }\r\n\r\n    const handleMenuOpen = (e) => {\r\n        setIsOpen(true);\r\n        profileAnchor.current = e.currentTarget;\r\n    }\r\n\r\n  return (\r\n    <>\r\n    <Box\r\n        sx={{\r\n            display: { xs: chatId ? 'none' : 'flex', sm: 'flex' },\r\n            flexDirection: 'column',\r\n            borderBottom: '1px solid black',\r\n            width: { xs: '100%', sm: '30%' },\r\n            height: '100vh'\r\n        }}\r\n    >\r\n        <MenuAnchor \r\n            isOpen={isOpen} \r\n            setIsOpen={setIsOpen} \r\n            dispatch={dispatch} \r\n            menuAnchor={profileAnchor} \r\n            openProfile={openProfile}\r\n        />\r\n        \r\n        <Box\r\n            sx={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'space-around',\r\n                alignItems: 'center',\r\n                backgroundColor: white,\r\n                borderRadius: '15px',\r\n                padding: '5px',\r\n                position: 'sticky',\r\n                top: 0,\r\n                height: { xs: '18%', sm: '13%' }\r\n            }}\r\n            margin={'5px'}\r\n        >\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'center',\r\n                    width: { xs: '100%', sm: 'auto' },\r\n                }}\r\n            >\r\n                <Typography variant='h5' sx={{ marginLeft: '5px' }}>Chats</Typography>\r\n                {\r\n                    user?.avatar?.url ? \r\n                    <IconBtn \r\n                        title={user?.username}\r\n                        src={user.avatar.url}\r\n                        color={isProfile ? theme : 'inherit'}\r\n                        sx={{\r\n                            display: { xs: 'flex', sm: 'none' }\r\n                        }}\r\n                        onClick={handleMenuOpen}\r\n                    />\r\n                    : \r\n                    <IconBtn \r\n                        title={user?.username}\r\n                        icon={<ProfileIcon />}\r\n                        color={isProfile ? theme : 'inherit'}\r\n                        sx={{\r\n                            display: { xs: 'flex', sm: 'none' }\r\n                        }}\r\n                        onClick={handleMenuOpen}\r\n                    />\r\n                }\r\n            </Box>\r\n            <InputBox \r\n                placeholder=\"Search Friends...\"\r\n                value={search}\r\n                onChange={handleSearchChange}\r\n            />\r\n        </Box>\r\n\r\n        {\r\n            isLoading ? \r\n            <Box sx={{\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n            }}>\r\n                <CircularProgress sx={{ color: theme }} />\r\n            </Box>\r\n            :\r\n            <Stack \r\n                direction={'column'}\r\n                sx={{ \r\n                    height: '100%', \r\n                    overflow: 'auto', \r\n                    backgroundColor: white, \r\n                    borderRadius: '20px',\r\n                    marginRight: '5px',\r\n                    border: `2px solid ${white}`,\r\n                    position: 'sticky',\r\n                    top: 0\r\n                }}\r\n            >\r\n            <OptionChip\r\n                optionType={optionType}\r\n                setOptionType={setOptionType}\r\n            />\r\n            \r\n            { !isLoading && userChats?.length > 0 ? (\r\n                userChats?.map((data, index) => {\r\n                    const { avatar, _id, name, groupChat, members } = data;\r\n                const newMessageAlert = newMessagesAlert.find(({ chatId }) => chatId === _id )\r\n                const isOnline = members?.some((member) => onlineUsers.includes(member));\r\n\r\n                return (\r\n                    <ChatItem\r\n                        key={_id}\r\n                        index={index}\r\n                        newMessageAlert={newMessageAlert}\r\n                        isOnline={isOnline}\r\n                        avatar={avatar}\r\n                        name={name}\r\n                        _id={_id}\r\n                        groupChat={groupChat}\r\n                        sameSender={chatId === _id}\r\n                    />\r\n                )\r\n                })\r\n                ) : (\r\n                    <Typography textAlign=\"center\" padding=\"1rem\">\r\n                        No chats\r\n                    </Typography>\r\n                )\r\n            }\r\n            </Stack>\r\n        }\r\n    </Box>\r\n    {\r\n        isProfile && (\r\n          <Suspense fallback={ <Backdrop open /> }>\r\n            <ProfileDialog />\r\n          </Suspense>\r\n        )\r\n    }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(ChatList);","import { Menu, Stack, Typography } from '@mui/material';\r\nimport React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { setIsDeleteMenu } from '../redux/reducers/misc';\r\nimport { Delete as DeleteIcon, ExitToApp as ExitToAppIcon } from '@mui/icons-material';\r\nimport { useAsyncMutation } from '../hooks/Hook';\r\nimport { useDeleteChatMutation, useLeaveGroupMutation } from '../redux/api/api';\r\n\r\nconst DeleteChatMenu = ({ dispatch, deleteMenuAnchor }) => {\r\n    const { isDeleteMenu, selectedDeleteChat } = useSelector(store => store.misc);\r\n    const navigate = useNavigate();\r\n    \r\n    const closeHandler = () => {\r\n        dispatch(setIsDeleteMenu(false));\r\n        deleteMenuAnchor.current = null;\r\n    }\r\n\r\n    const isGroupChat = selectedDeleteChat?.groupChat;\r\n\r\n    const [deleteChat, ,deleteChatData] = useAsyncMutation(useDeleteChatMutation);\r\n\r\n    const [leaveGroup, ,leaveGroupData] = useAsyncMutation(useLeaveGroupMutation);\r\n\r\n    const leaveGroupHandler = () => {\r\n        closeHandler();\r\n        leaveGroup('Leaving Group...', selectedDeleteChat?.chatId);\r\n    };\r\n    \r\n    const deleteChatHandler = () => {\r\n        closeHandler();\r\n        deleteChat('Deleting Chat...', selectedDeleteChat?.chatId);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(deleteChatData || leaveGroupData) \r\n            navigate('/Chat-app-MERN');\r\n    }, [deleteChatData, leaveGroupData]);\r\n    \r\n  return (\r\n    <Menu\r\n        open={isDeleteMenu}\r\n        onClose={closeHandler}\r\n        anchorEl={deleteMenuAnchor.current}\r\n        anchorOrigin={{\r\n            vertical: 'bottom',\r\n            horizontal: 'right',\r\n         }}\r\n        transformOrigin={{\r\n            vertical: 'center',\r\n            horizontal: 'center'\r\n        }}\r\n    >\r\n        <Stack\r\n            sx={{\r\n            width: \"10rem\",\r\n            padding: \"0.5rem\",\r\n            cursor: \"pointer\",\r\n            }}\r\n            direction=\"row\"\r\n            alignItems={\"center\"}\r\n            spacing=\"0.5rem\"\r\n            onClick={isGroupChat ? leaveGroupHandler: deleteChatHandler}\r\n        >\r\n        {\r\n          isGroupChat ? (\r\n          <><ExitToAppIcon /> <Typography>Leave Group</Typography></>\r\n          ) : (\r\n          <> <DeleteIcon /> <Typography>Clear Chat</Typography></>\r\n          )\r\n        }\r\n      </Stack>\r\n    </Menu>\r\n  )\r\n}\r\n\r\nexport default DeleteChatMenu","import React, { useCallback, useEffect, useRef, useState } from 'react'\r\nimport Title from '../shared/Title'\r\nimport SideBar from './SideBar'\r\nimport { Box } from '@mui/material'\r\nimport { gray } from '../constants/color'\r\nimport ChatList from './ChatList'\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { sampleMessage } from '../constants/sampleData'\r\nimport { useMyChatsQuery } from '../redux/api/api'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useSocket } from '../context/socket';\r\nimport { useSocketEvents } from '../hooks/Hook'\r\nimport { CHAT_JOINED, NEW_MESSAGE_ALERT, NEW_REQUEST, ONLINE_USERS, ONLINE_USER_DELETE, ONLINE_USER_SET, REFETCH_CHATS } from '../constants/events'\r\nimport { incrementNotification, setNewMessagesAlert, setNewMessageCount } from '../redux/reducers/chat.js'\r\nimport { getOrSaveFromStorage } from '../lib/features'\r\nimport { setIsDeleteMenu, setSelectedDeleteChat } from '../redux/reducers/misc.js'\r\nimport DeleteChatMenu from '../dialogs/DeleteChatMenu.jsx'\r\n\r\nconst appLayout = () => (WrappedComponent) => {\r\n    return (props) => {\r\n\r\n        const { user } = useSelector(store => store.auth);\r\n        const { newMessageAlert, newMessagesCount } = useSelector(store => store.chat);\r\n\r\n        const [onlineUsers, setOnlineUsers] = useState([]);\r\n        \r\n        const params = useParams();\r\n        const socket = useSocket();\r\n        const dispatch = useDispatch();\r\n        const navigate = useNavigate();\r\n\r\n        const chatId = params.id;\r\n        const deleteMenuAnchor = useRef(null);\r\n        \r\n        const { data, isLoading, refetch } = useMyChatsQuery('');\r\n\r\n        useEffect(() => {\r\n            getOrSaveFromStorage({ key: NEW_MESSAGE_ALERT, value: newMessageAlert });\r\n            dispatch(setNewMessageCount())\r\n        }, [newMessageAlert, dispatch]);\r\n\r\n        useEffect(() => {\r\n            refetch();\r\n            socket.emit(CHAT_JOINED, { userId: user._id });\r\n          }, [user?.user, refetch, socket, user._id]);      \r\n\r\n        useEffect(() => {\r\n            socket.emit(ONLINE_USER_SET, {userId: user?._id});\r\n            return () => socket.emit(ONLINE_USER_DELETE, { userId: user._id });\r\n        }, []);\r\n\r\n        const handleDeleteChat = (e, _id, groupChat) => {\r\n            dispatch(setIsDeleteMenu(true));\r\n            dispatch(setSelectedDeleteChat({ chatId: _id, groupChat }));\r\n            deleteMenuAnchor.current = e.currentTarget;\r\n        }\r\n\r\n        const newMessageAlertListener = useCallback((data) => {\r\n            if(data.chatId === chatId) return;\r\n            dispatch(setNewMessagesAlert(data));\r\n        }, [chatId, dispatch]);\r\n\r\n        const onlineUsersListener = useCallback((data) => {\r\n            setOnlineUsers(data);\r\n        }, [chatId]);\r\n\r\n        const newRequestListener = useCallback(() => {\r\n            dispatch(incrementNotification());\r\n        }, [dispatch]);\r\n\r\n        const refetchListener = useCallback((data) => {\r\n            refetch();\r\n            navigate('/Chat-app-MERN');\r\n        }, [refetch, navigate]);\r\n        \r\n        const eventHandlers = {\r\n            [NEW_MESSAGE_ALERT]: newMessageAlertListener,\r\n            [ONLINE_USERS]: onlineUsersListener,\r\n            [NEW_REQUEST]: newRequestListener,\r\n            [REFETCH_CHATS]: refetchListener,\r\n        };\r\n\r\n        useSocketEvents(socket, eventHandlers);\r\n\r\n        return (\r\n        <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    position: {xs: 'relative', sm: 'fixed' },\r\n                    flexDirection: { xs: 'column-reverse', sm: 'row'},\r\n                    backgroundColor: gray,\r\n                    height: '100%',\r\n                    width: '100%'\r\n                }}\r\n        >\r\n            <Title newMessagesCount={newMessagesCount} />\r\n            <SideBar chatId={chatId} />\r\n            <DeleteChatMenu dispatch={dispatch} deleteMenuAnchor={deleteMenuAnchor} />\r\n            <ChatList \r\n                chats={data?.chats} \r\n                newMessagesAlert={newMessageAlert} \r\n                onlineUsers={onlineUsers}\r\n                user={user}\r\n                isLoading={isLoading}\r\n            />\r\n            <WrappedComponent \r\n                {...props}\r\n                chatId={chatId} \r\n                user={user}\r\n                handleDeleteChat={handleDeleteChat}\r\n            />\r\n        </Box>)\r\n    }\r\n}\r\n\r\nexport default appLayout\r\n","import React, { memo } from \"react\";\r\nimport { Tooltip, IconButton, Badge, Avatar, Box, Typography } from '@mui/material';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst IconBtn = ({ title, icon, onClick, value, color='inherit', sx, src, name }) => {\r\n  const { theme } = useSelector(store => store.chat);\r\n  return (\r\n      <Tooltip title={title} sx={sx}>\r\n        <IconButton size=\"large\" onClick={onClick} style={{\r\n          color: color,\r\n          flexDirection: 'column',\r\n        }}>\r\n          { src ? \r\n            value ? <Badge \r\n            badgeContent={value} \r\n            sx={{\r\n              '& .MuiBadge-badge': {\r\n                backgroundColor: color === 'inherit' ? 'white' : color ,\r\n                color: color === 'inherit' ? 'black' : 'white',\r\n              },\r\n            }}\r\n            >{icon}</Badge> : <Avatar src={src} />\r\n            :\r\n            value ? <Badge \r\n                      badgeContent={value} \r\n                      sx={{\r\n                        '& .MuiBadge-badge': {\r\n                          backgroundColor: color === 'inherit' ? theme : 'white' ,\r\n                          color: color === 'inherit' ? 'white' : 'black',\r\n                        },\r\n                      }}\r\n                    >{icon}</Badge> : icon\r\n          } \r\n          {name &&\r\n            <Typography sx={{\r\n              fontSize: '0.6rem',\r\n              display: {xs: 'flex', sm: 'none'}\r\n            }}>{name}</Typography>\r\n          }\r\n        </IconButton>\r\n      </Tooltip>\r\n    );\r\n};\r\n\r\nexport default memo(IconBtn)","import { AppBar, Backdrop, Box, Typography } from '@mui/material'\r\nimport React, { Suspense, lazy, memo, useRef, useState } from 'react'\r\nimport { purple } from '../constants/color.js';\r\nimport {\r\n  Search as SearchIcon,\r\n  Add as AddIcon,\r\n  Group as GroupIcon,\r\n  Notifications as NotificationsIcon,\r\n  AccountCircle as ProfileIcon,\r\n} from '@mui/icons-material';\r\nimport ChatIcon from '@mui/icons-material/Chat';\r\nimport ForumIcon from '@mui/icons-material/Forum';\r\nimport IconBtn from './IconButton';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setIsNewGroup, setIsNotification, setIsProfile, setIsSearch } from '../redux/reducers/misc.js';\r\nimport { resetNotificationCount } from '../redux/reducers/chat.js';\r\nimport MenuAnchor from '../dialogs/MenuAnchor.jsx';\r\n\r\nconst SearchDialog = lazy(() => import('../dialogs/Search.jsx'));\r\nconst NotificationDialog = lazy(() => import('../dialogs/Notification.jsx'));\r\nconst NewGroupDialog = lazy(() => import('../dialogs/NewGroup.jsx'));\r\nconst ProfileDialog = lazy(() => import('../dialogs/ProfileDialog.jsx'));\r\n\r\nconst SideBar = ({ chatId }) => {\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const dispatch = useDispatch();\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const profileAnchor = useRef(null);\r\n\r\n  const { user } = useSelector((store) => store.auth);\r\n  const { isSearch, isNotification, isNewGroup, isProfile } = useSelector((store) => store.misc);\r\n  const { notificationCount, theme, newMessagesCount } = useSelector((store) => store.chat);\r\n  \r\n  const navigateToGroup = () => {\r\n    navigate('/Chat-app-MERN/groups')\r\n  }\r\n  const navigateToChat = () => {\r\n    navigate('/Chat-app-MERN')\r\n  }\r\n\r\n  const openSearchDialog = () => dispatch(setIsSearch(true));\r\n  const openNotification = () => {\r\n    dispatch(setIsNotification(true));\r\n    dispatch(resetNotificationCount())\r\n  }\r\n  const openNewGroup = () => dispatch(setIsNewGroup(true));\r\n  const openProfile = () => { \r\n    setIsOpen(false);\r\n    dispatch(setIsProfile(true));\r\n  }\r\n\r\n  const handleMenuOpen = (e) => {\r\n    setIsOpen(true);\r\n    profileAnchor.current = e.currentTarget;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <AppBar\r\n          sx={{\r\n            bgcolor: purple,\r\n            // height: { xs: '40px', sm: '100vh' },\r\n            height: { xs: 'auto', sm: '100vh' },\r\n            width: { xs: '100vw', sm: '80px' },\r\n            margin: { xs:'none' , sm: '3px' },\r\n            padding: { xs: 'none' , sm: '10px' },\r\n            borderRadius: { xs: '10px 10px 0px 0px', sm: '20px' },\r\n            display: { xs: chatId ? 'none' : 'flex', sm: 'flex' },\r\n            flexDirection: { xs: 'row', sm: 'column' }, \r\n            alignItems: {xs: 'center', sm: 'space-between'},\r\n            justifyContent: {xs: 'center', sm: 'space-around'},\r\n            position: { sm: 'sticky', xs: 'fixed' },\r\n            left: { sm: 0, xs: 0},\r\n            right: { sm: 'auto', xs: 'auto' },\r\n            bottom: { sm: 'auto', xs: 0 },\r\n            top: { sm: 0, xs: 'auto' },\r\n          }}\r\n        >\r\n          <MenuAnchor \r\n            isOpen={isOpen} \r\n            setIsOpen={setIsOpen} \r\n            dispatch={dispatch} \r\n            menuAnchor={profileAnchor} \r\n            openProfile={openProfile}\r\n          />\r\n          <Typography\r\n            variant='h6'\r\n            sx={{\r\n              display: { xs: 'none', sm: 'block' },\r\n            }}\r\n          >\r\n            <ForumIcon />\r\n          </Typography>\r\n\r\n          <Box sx={{\r\n            display: 'flex',\r\n            flexDirection: { xs: 'row', sm: 'column' },\r\n            flexWrap: 'nowrap',\r\n            overflowX: 'auto'\r\n          }}>\r\n            <IconBtn\r\n              title=\"Chats\"\r\n              icon={<ChatIcon />}\r\n              onClick={navigateToChat}\r\n              color={(location.pathname.includes('/chat') || location.pathname === '/Chat-app-MERN') && (!isSearch && !isNotification && !isNewGroup && !isProfile) ? theme : 'inherit'}\r\n              value={newMessagesCount}\r\n              name={'Chats'}\r\n              sx={{flexShrink: 0, marginRight: '2px'}}\r\n              />\r\n            <IconBtn\r\n              title=\"Search\"\r\n              icon={<SearchIcon />}\r\n              color={isSearch ? theme : 'inherit'}\r\n              onClick={openSearchDialog}\r\n              name={'Search'}\r\n              sx={{flexShrink: 0, marginRight: '2px'}}\r\n              />\r\n            <IconBtn\r\n              title=\"New Group\"\r\n              icon={<AddIcon />}\r\n              color={isNewGroup ? theme : 'inherit'}\r\n              onClick={openNewGroup}\r\n              name={'New Group'}\r\n              sx={{flexShrink: 0, marginRight: '2px'}}\r\n              />\r\n            <IconBtn\r\n              title=\"Manage Groups\"\r\n              icon={<GroupIcon />}\r\n              color={(location.pathname.includes('/groups')) && (!isSearch && !isNotification && !isNewGroup && !isProfile) ? theme : 'inherit'}\r\n              onClick={navigateToGroup}\r\n              name={'Manage Groups'}\r\n              sx={{flexShrink: 0, marginRight: '2px'}}\r\n              />\r\n            <IconBtn\r\n              title=\"Notifications\"\r\n              icon={<NotificationsIcon />}\r\n              color={isNotification ? theme : 'inherit'}\r\n              value={notificationCount}\r\n              onClick={openNotification}\r\n              name={'Notifications'}\r\n              sx={{flexShrink: 0, marginRight: '2px'}}\r\n            />\r\n          </Box>\r\n          {\r\n            user?.avatar?.url ? \r\n            <IconBtn \r\n              title={user.username}\r\n              src={user.avatar.url}\r\n              color={isProfile ? theme : 'inherit'}\r\n              sx={{\r\n                  display: { xs: 'none', sm: 'flex' }\r\n              }}\r\n              onClick={handleMenuOpen}\r\n            />\r\n            : \r\n            <IconBtn \r\n              title={user.username}\r\n              icon={<ProfileIcon />}\r\n              color={isProfile ? theme : 'inherit'}\r\n              sx={{\r\n                  display: { xs: 'none', sm: 'flex' }\r\n              }}\r\n              onClick={handleMenuOpen}\r\n            />\r\n          }\r\n      </AppBar>\r\n      {\r\n        isSearch && (\r\n          <Suspense fallback={ <Backdrop open /> }>\r\n            <SearchDialog />\r\n          </Suspense>\r\n        )\r\n      }\r\n      {\r\n        isNotification && (\r\n          <Suspense fallback={ <Backdrop open /> }>\r\n            <NotificationDialog />\r\n          </Suspense>\r\n        )\r\n      }\r\n      {\r\n        isNewGroup && (\r\n          <Suspense fallback={ <Backdrop open /> }>\r\n            <NewGroupDialog />\r\n          </Suspense>\r\n        )\r\n      }\r\n      {\r\n        isProfile && (\r\n          <Suspense fallback={ <Backdrop open /> }>\r\n            <ProfileDialog />\r\n          </Suspense>\r\n        )\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default memo(SideBar)","const ALERT = \"ALERT\";\r\nconst REFETCH_CHATS = \"REFETCH_CHATS\";\r\n\r\nconst NEW_ATTACHMENT = \"NEW_ATTACHMENT\";\r\nconst NEW_MESSAGE_ALERT = \"NEW_MESSAGE_ALERT\";\r\n\r\nconst NEW_REQUEST = \"NEW_REQUEST\";\r\n\r\nconst NEW_MESSAGE = \"NEW_MESSAGE\";\r\n\r\nconst START_TYPING = \"START_TYPING\";\r\nconst STOP_TYPING = \"STOP_TYPING\";\r\n\r\nconst CHAT_JOINED = \"CHAT_JOINED\";\r\nconst CHAT_LEAVED = \"CHAT_LEAVED\";\r\n\r\nconst ONLINE_USERS = 'ONLINE_USERS';\r\nconst ONLINE_USER_SET = 'ONLINE_USER_SET';\r\nconst ONLINE_USER_DELETE = 'ONLINE_USER_DELETE';\r\n\r\nconst GROUP_USER_TYPING = 'GROUP_USER_TYPING';\r\nconst GROUP_USER_STOPPED_TYPING = 'GROUP_USER_STOPPED_TYPING';\r\n\r\nconst REFETCH_PROFILE = 'REFETCH_PROFILE';\r\nconst REFETCH_GROUP_CHAT_LIST = 'REFETCH_GROUP_CHAT_LIST'\r\nconst REFETCH_GROUP_CHAT_MEMBERS = 'REFETCH_GROUP_CHAT_MEMBERS';\r\n\r\nexport {\r\n  ALERT,\r\n  REFETCH_CHATS,\r\n  NEW_ATTACHMENT,\r\n  NEW_MESSAGE_ALERT,\r\n  NEW_REQUEST,\r\n  NEW_MESSAGE,\r\n  START_TYPING,\r\n  STOP_TYPING,\r\n  CHAT_JOINED,\r\n  CHAT_LEAVED,\r\n  ONLINE_USERS,\r\n  ONLINE_USER_SET,\r\n  ONLINE_USER_DELETE,\r\n  GROUP_USER_TYPING,\r\n  GROUP_USER_STOPPED_TYPING,\r\n  REFETCH_PROFILE,\r\n  REFETCH_GROUP_CHAT_LIST,\r\n  REFETCH_GROUP_CHAT_MEMBERS,\r\n};\r\n","import { Box, ListItemText, Menu, MenuItem, MenuList, Stack } from '@mui/material';\r\nimport React, { memo, useState } from 'react'\r\nimport AccountBoxIcon from '@mui/icons-material/AccountBox';\r\nimport LogoutIcon from '@mui/icons-material/Logout';\r\nimport { userNotExists } from '../redux/reducers/auth';\r\nimport toast from 'react-hot-toast';\r\nimport axios from 'axios';\r\n\r\nconst MenuAnchor = ({ isOpen, setIsOpen, dispatch, menuAnchor, openProfile }) => {\r\n\r\n    const handleClose = () => {\r\n        menuAnchor.current = null;\r\n        setIsOpen(false);\r\n    } \r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n          const { data } = await axios.get(`${process.env.REACT_APP_SERVER_URL}/api/v1/user/logout`, { withCredentials: true });\r\n          dispatch(userNotExists());\r\n          toast.success(data.message);\r\n        } catch (error) {\r\n          toast.error(error?.response?.data?.message || 'Something went wrong');\r\n        }\r\n        setIsOpen(false);\r\n    };\r\n\r\n  return (\r\n    <Menu\r\n        open = {isOpen}\r\n        onClose={handleClose}\r\n        anchorEl={menuAnchor.current}\r\n        anchorOrigin={{\r\n            vertical: 'center',\r\n            horizontal: 'right',\r\n        }}\r\n        transformOrigin={{\r\n            vertical: 'center',\r\n            horizontal: 'center',\r\n        }}\r\n    >\r\n      <div style={{ width: '10rem' }}>\r\n        <MenuList>\r\n          <MenuItem\r\n            onClick={openProfile}\r\n          >\r\n              <AccountBoxIcon />\r\n              <ListItemText style={{ marginLeft: '0.5rem' }}>MyProfile</ListItemText>\r\n          \r\n          </MenuItem>\r\n          <MenuItem \r\n            onClick={handleLogout}\r\n          >\r\n            <LogoutIcon />\r\n            <ListItemText style={{ marginLeft: '0.5rem' }}>Logout</ListItemText>\r\n          </MenuItem>\r\n        </MenuList>\r\n      </div>\r\n    </Menu>\r\n  )\r\n}\r\n\r\nexport default memo(MenuAnchor)","import { useEffect, useState } from \"react\";\r\nimport toast from 'react-hot-toast';\r\n\r\nconst useSocketEvents = (socket, handlers) => {\r\n  useEffect(() => {\r\n      Object.entries(handlers).forEach(([event, handler]) => {\r\n          socket.on(event, handler);\r\n      });\r\n      return () => {\r\n          Object.entries(handlers).forEach(([event, handler]) => {\r\n            socket.off(event, handler);\r\n          });\r\n    \r\n        } \r\n  }, [socket, handlers]);\r\n};\r\n\r\nconst useErrors = (errors=[]) => {\r\n  useEffect(() => {\r\n    errors.forEach(({ isError, error, fallBack }) => {\r\n      if(isError) {\r\n        if(fallBack) fallBack();\r\n        else toast.error(error?.data?.message || 'Something went wrong');\r\n      }\r\n    })\r\n  }, [errors]);\r\n};\r\n\r\nconst useAsyncMutation = (mutationHook) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [data, setData] = useState(null);\r\n\r\n  const [mutate] = mutationHook();\r\n  const executeMutation = async(toastMessage, ...args) => { \r\n    setIsLoading(true);\r\n    const toastId = toast.loading(toastMessage || 'Updating data...');\r\n    \r\n    try {\r\n      const res = await mutate(...args);\r\n      \r\n      if(res.data) {\r\n        toast.success(res.data.message || 'Updated data Successfuly', {\r\n          id: toastId,\r\n        });\r\n        setData(res.data);\r\n      } else {\r\n        toast.error(res?.error?.data?.message || 'Something went wrong', {\r\n          id: toastId,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n      toast.error('Something went wrong!', { id: toastId });\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return [ executeMutation, isLoading, data ];\r\n};\r\n\r\nexport { useSocketEvents, useErrors, useAsyncMutation };","import React, { memo } from 'react'\r\nimport { Avatar, AvatarGroup, Stack, Box } from '@mui/material'\r\n\r\nconst AvatarCard = ({ avatar=[], max=4 }) => {\r\n  return (\r\n    <Stack \r\n        direction={'row'} \r\n        spacing={0.5}\r\n    >\r\n        <AvatarGroup\r\n            max={max}\r\n            sx={{\r\n                position: 'relative'\r\n            }}\r\n        >\r\n            <Box width={'5rem'} height={'3rem'} />\r\n            {avatar && avatar?.map((i, index) => (\r\n                <Avatar\r\n                  key={Math.random()*100} \r\n                  src={i?.avatar ? i?.avatar?.url : i} \r\n                  alt={`Avatar ${index}`}\r\n                  sx={{\r\n                    width: '3rem',\r\n                    height: '3rem',\r\n                    position: 'absolute',\r\n                    left: {\r\n                        xs: `${0.5 + index}rem`,\r\n                        sm: `${index+1}rem`\r\n                    }\r\n                  }} \r\n                />\r\n            ))}\r\n        </AvatarGroup>\r\n    </Stack>\r\n  )\r\n}\r\n\r\nexport default memo(AvatarCard)","import React, { memo } from 'react'\r\nimport { Helmet } from 'react-helmet-async'\r\n\r\nconst Title = ({ title = 'We-Chat', description='This is the Chat App', newMessagesCount = 0 }) => {\r\n  return (\r\n    <Helmet>\r\n      {newMessagesCount>0 ? \r\n        <title>{ `(${newMessagesCount}) ` + title }</title>\r\n        :\r\n        <title>{ title }</title>\r\n      }\r\n        <meta name='description' content={description} />\r\n    </Helmet>\r\n  )\r\n}\r\n\r\nexport default memo(Title)"],"names":["ChatItem","_ref","avatar","name","_id","groupChat","sameSender","isOnline","index","newMessageAlert","theme","useSelector","store","chat","_jsx","Link","sx","padding","borderRadius","to","concat","children","_jsxs","style","display","gap","alignItems","backgroundColor","gray","color","position","AvatarCard","Box","width","height","border","margin","marginBottom","bottom","right","xs","sm","transform","Stack","Typography","variant","fontSize","bgcolor","white","count","memo","OptionChip","optionType","setOptionType","marginTop","Chip","label","clickable","onClick","borderColor","ProfileDialog","lazy","ChatList","_user$avatar","chats","newMessagesAlert","chatId","user","onlineUsers","isLoading","dispatch","useDispatch","params","useParams","id","profileAnchor","useRef","search","setSearch","useState","userChats","setUserChats","isOpen","setIsOpen","isProfile","misc","filterOptions","unreadChats","filter","some","unreadChat","groupChats","useEffect","trim","filteredChats","toLowerCase","includes","handleMenuOpen","e","current","currentTarget","_Fragment","flexDirection","borderBottom","MenuAnchor","menuAnchor","openProfile","setIsProfile","justifyContent","top","marginLeft","url","IconBtn","title","username","src","icon","ProfileIcon","InputBox","placeholder","value","onChange","target","CircularProgress","direction","overflow","marginRight","length","map","data","members","find","_ref2","member","textAlign","Suspense","fallback","Backdrop","open","deleteMenuAnchor","isDeleteMenu","selectedDeleteChat","navigate","useNavigate","closeHandler","setIsDeleteMenu","isGroupChat","deleteChat","deleteChatData","useAsyncMutation","useDeleteChatMutation","leaveGroup","leaveGroupData","useLeaveGroupMutation","Menu","onClose","anchorEl","anchorOrigin","vertical","horizontal","transformOrigin","cursor","spacing","leaveGroupHandler","deleteChatHandler","ExitToAppIcon","DeleteIcon","appLayout","WrappedComponent","props","auth","newMessagesCount","setOnlineUsers","socket","useSocket","refetch","useMyChatsQuery","getOrSaveFromStorage","key","NEW_MESSAGE_ALERT","setNewMessageCount","emit","CHAT_JOINED","userId","ONLINE_USER_SET","ONLINE_USER_DELETE","newMessageAlertListener","useCallback","setNewMessagesAlert","onlineUsersListener","newRequestListener","incrementNotification","refetchListener","eventHandlers","ONLINE_USERS","NEW_REQUEST","REFETCH_CHATS","useSocketEvents","Title","SideBar","DeleteChatMenu","handleDeleteChat","setSelectedDeleteChat","Tooltip","IconButton","size","Badge","badgeContent","Avatar","SearchDialog","NotificationDialog","NewGroupDialog","location","useLocation","isSearch","isNotification","isNewGroup","notificationCount","AppBar","purple","left","ForumIcon","flexWrap","overflowX","ChatIcon","navigateToChat","pathname","flexShrink","SearchIcon","openSearchDialog","setIsSearch","AddIcon","openNewGroup","setIsNewGroup","GroupIcon","navigateToGroup","NotificationsIcon","openNotification","setIsNotification","resetNotificationCount","ALERT","NEW_MESSAGE","START_TYPING","STOP_TYPING","GROUP_USER_TYPING","GROUP_USER_STOPPED_TYPING","REFETCH_PROFILE","REFETCH_GROUP_CHAT_MEMBERS","handleClose","MenuList","MenuItem","AccountBoxIcon","ListItemText","async","axios","get","process","withCredentials","userNotExists","toast","success","message","error","_error$response","_error$response$data","response","LogoutIcon","handlers","Object","entries","forEach","event","handler","on","off","useErrors","errors","arguments","undefined","_ref3","isError","fallBack","_error$data","mutationHook","setIsLoading","setData","mutate","toastMessage","toastId","loading","_len","args","Array","_key","res","_res$error","_res$error$data","console","log","max","AvatarGroup","i","_i$avatar","alt","Math","random","description","Helmet","content"],"sourceRoot":""}